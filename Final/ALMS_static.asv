% ==================== revised sections ====================
% errorCount1 = errorCount1 + (d1 > 1.4) + (d1 > 1.9)
% === === === === === === === === === === === === === === ===
clc;
clear;
close all;
load project_data2024.mat;
%% ==================== Static Channel Case ====================
trainLength = 1000;
dataLength = 200000;
totalLength = length(data_static_1);
% ==================== parameter setup ====================
L = 10;                                                         % filter length
alpha = 0.01;                                                   % Averaged LMS paremeter, step size
N = 10;                                                         % Averaged LMS paremeter
% === === === === === === === === === === === === === === ===
b1 = zeros(L,N);                                                % Averaged LMS, LPF
b2 = zeros(L,N);
f1 = zeros(L,1);                                                % filter coefficients
f2 = zeros(L,1);
y1_training = zeros(1,trainLength);                             % the training sequence of y(n)
y2_training = zeros(1,trainLength);
ans_static_1 = zeros(1,totalLength);                            % recovered data, information for verifying answers with the TA
ans_static_2 = zeros(1,totalLength);
e1 = zeros(1, totalLength);
e2 = zeros(1, totalLength);

for n = 1:2*L
    % ==================== Training Mode ====================
    if n <= trainLength                                        
        if n<L
            x1 = [data_static_1(1, n:-1:1) zeros(1, L-n)].';        % col vector of input data with dimension L
            x2 = [data_static_2(1, n:-1:1) zeros(1, L-n)].'; 
        else
            x1 = (data_static_1(1, n:-1:n-L+1)).';                  % col vector of input data with dimension L
            x2 = (data_static_2(1, n:-1:n-L+1)).';
        end
        y1 = (f1.') * x1;                                           % Chap05 > Complex LMS > (46) 
        y2 = (f2.') * x2;
        e1(n) = trainseq_static_1(1,n) - y1;
        e2(n) = trainseq_static_2(1,n) - y2;
        b1(:, 1:N-1) = b1(:, 2:N); b1(:, N) = e1(n) * conj(x1);     % Chap05 > ALMS > (31)
        b2(:, 1:N-1) = b2(:, 2:N); b2(:, N) = e2(n) * conj(x2);
        f1 = f1 + (alpha * mean(b1, 2));
        f2 = f2 + (alpha * mean(b2, 2));

        y1_training(1,n) = y1;                                      % ???
        y2_training(1,n) = y2;
    % ==================== Decision-Directed Mode ====================
    else
        x1 = (data_static_1(1, n:-1:n-L+1)).';                      % col vector of input data with dimension L
        x2 = (data_static_2(1, n:-1:n-L+1)).';
        y1 = (f1.') * x1;                                           % Chap05 > Complex LMS > (46) 
        y2 = (f2.') * x2;
        ans_static_1(1, n) = QPSK_decision(y1);                     % Decision Device
        ans_static_2(1, n) = QPSK_decision(y2);
        e1(n) = ans_static_1(1, n) - y1;
        e2(n) = ans_static_2(1, n) - y2;
        b1(:, 1:N-1) = b1(:, 2:N); b1(:, N) = e1(n) * conj(x1);     % Chap05 > ALMS > (31) 
        b2(:, 1:N-1) = b2(:, 2:N); b2(:, N) = e2(n) * conj(x2);
        f1 = f1 + (alpha * mean(b1, 2));
        f2 = f2 + (alpha * mean(b2, 2));
    end
    % ==================== ==================== ====================
end



ans_static_1(:, 1:trainLength) = [];                                % truncate the training mode ans
ans_static_2(:, 1:trainLength) = [];

% calculate the cost function J = e(n)^2
J1_training = abs(e1(1, 1:trainLength)).*abs(e1(1, 1:trainLength)); % Chap05 > Complex LMS > (49)
J2_training = abs(e2(1, 1:trainLength)).*abs(e2(1, 1:trainLength));
J1 = abs(e1).*abs(e1);
J2 = abs(e2).*abs(e2);

% ==================== BER for training mode ====================
errorCount1 = 0;
errorCount2 = 0;
for n = 1:trainLength
    d1 = abs(QPSK_decision(y1_training(n)) - trainseq_static_1(1,n));
    d2 = abs(QPSK_decision(y2_training(n)) - trainseq_static_2(1,n));
    errorCount1 = errorCount1 + (d1 > 1.4) + (d1 > 1.9);
    errorCount2 = errorCount2 + (d2 > 1.4) + (d2 > 1.9);
end
fprintf(' Static Channel Case BER1 is %s \n',errorCount1/2/trainLength);
fprintf(' Static Channel Case BER2 is %s \n',errorCount2/2/trainLength);

% ==================== plot ====================
intervalAmount = 200;
interval = ceil(trainLength/intervalAmount);
figure
plot(1:interval:trainLength, J1_training(1:interval:trainLength))
title("Training error1 for Static Channel Case");
xlabel("bits");
ylabel("|e|^2");
figure
plot(1:interval:trainLength, J2_training(1:interval:trainLength))
title("Training error2 for Static Channel Case");
xlabel("bits");
ylabel("|e|^2");

interval = ceil(totalLength/intervalAmount);
figure
subplot(2,1,1); 
plot(1:interval:totalLength, J1(1:interval:totalLength))
title('Static Channel Case 1 :')
xlabel('index of bit (n)')
ylabel('|e(n)^2|')
subplot(2,1,2); 
plot(1:interval:totalLength, J2(1:interval:totalLength))
title('Static Channel Case 2 :')
xlabel('index of bit (n)')
ylabel('|e(n)^2|')

% saved recovered data as ans_static.mat
save(['ans_static.mat'], 'ans_static_1', 'ans_static_2');